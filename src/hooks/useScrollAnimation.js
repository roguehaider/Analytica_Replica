import { useEffect, useRef, useState } from 'react';export const useScrollAnimation = (threshold = 0.1) => {  const [isVisible, setIsVisible] = useState(false);  const ref = useRef(null);  useEffect(() => {    const observer = new IntersectionObserver(      ([entry]) => {        if (entry.isIntersecting) {          setIsVisible(true);        }      },      {        threshold,        rootMargin: '0px 0px -50px 0px'      }    );    const currentRef = ref.current;    if (currentRef) {      observer.observe(currentRef);    }    return () => {      if (currentRef) {        observer.unobserve(currentRef);      }    };  }, [threshold]);  return [ref, isVisible];};export const useStaggerAnimation = (items, delay = 0.1) => {  const [visibleItems, setVisibleItems] = useState([]);  const [ref, isVisible] = useScrollAnimation(0.1);  useEffect(() => {    if (isVisible) {      items.forEach((_, index) => {        setTimeout(() => {          setVisibleItems(prev => [...prev, index]);        }, index * delay * 1000);      });    }  }, [isVisible, items, delay]);  return [ref, visibleItems];};